@startuml
!pragma layout smetana
class PlateauFactory{
    + makePlateau(typePlateau : Plateau[], plateauBateau : PlateauBateau): Plateau
}

abstract class Plateau {
    # Plateau plateau
    + PlateauDecorator(plateau : Plateau)
    + ajouterTir()
}


abstract class Joueur{
    + determinerTir(plateauTir: ): Coordonnee
    + demanderPlacerBateaux(numeroBateau: int): List<Coordonnee>
    # determinerPlacerBateaux(coordonneBateau: List<Coordonnee>, numeroBateau: int)
}

class MenuPrincipal{
    + {static} main(args: String[])
    + afficherMenu()
    - jouerNouvellePartie()
    - jouerPartieExistante(nomFichier: String)
    - quitterJeu()
}

class Jeu {
    - phase: PhaseJeu
    + jouer()
    + prochaineAction()
    + effectuerPhase(phase: PhaseJeu)
    + determinerModeJeu()
    + initialiserPlateaux()
    + placerBateaux()
    + effectuerProchainTour()
    + enregistrer()
    + visualiser()
}

class PlateauBateau {
    + PlateauBateau(plateau : Plateau)
    + placerBateau()
    + ajouterTir()
}

class PlateauTir {
    + PlateauTir(plateau : Plateau)
    - verifierTir(coordonnee: pair)
    + ajouterTir()
}

class Bateau {
    - Position[]: pair
    - PointDeVie: int
    + estTouche(coordonnee: pair): Tir
}

enum Case {
    + aucun
    + rate
    + touche
    + coule
    + Bateau
}

class IADebutant {
    + determinerTir(plateauTir: PlateauTir): Coordonnee
}

class IAAvance{
    + determinerTir(plateauTir: PlateauTir): Coordonnee
}

class ChargeurPartie {
    + {static} chargerPartie(nomFichier: String)
}

class VisualiseurPartie {
    - timelinePlateaux[]
    + visualiserPartie(): pair<PlateauBateau,PlateauTir>
    + ajouterEtape(plateau : Plateau)
}

class AfficheurPartie {
    + {static} afficherPartie(plateauBat: PlateauBateau, plateauTir: PlateauTir)
}

class EnregistreurPartie {
    + {static} enregistrerPartie(nomFichier: String)
}

class Personne {
    # determinerTir(): pair
    # determinerPlacerBateaux(coordonneBateau: List<Coordonnee>, numeroBateau: int)
}

interface PhaseJeu {
    - jeu: Jeu
    + PhaseJeu(jeu)
    + prochaineAction()
}

class PhaseSelectionnerJoueur {}

class PhasePlacerBateaux {}

class PhaseJouer {}

class PhaseFinJeu {}

PhaseJeu <-left-o Jeu

PhaseSelectionnerJoueur -up-|> PhaseJeu
PhasePlacerBateaux -up-|> PhaseJeu
PhaseJouer -up-|> PhaseJeu
PhaseFinJeu -up-|> PhaseJeu


PlateauBateau -- "5" Bateau
Plateau <|-- PlateauBateau
Plateau <|-- PlateauTir
Jeu *-left- "2" Joueur
Jeu -right-> EnregistreurPartie
Jeu -right-> VisualiseurPartie
Jeu -right-> AfficheurPartie
MenuPrincipal -> ChargeurPartie
MenuPrincipal ---> Jeu
Jeu --- "4" Plateau
Plateau -down- "*" Case
Joueur <|-up- IADebutant
Joueur <|-up- IAAvance
Joueur <|-down-- Personne
PlateauBateau <- PlateauTir
VisualiseurPartie --> AfficheurPartie
PlateauFactory -left-> Plateau
Jeu --  PlateauFactory
@enduml
